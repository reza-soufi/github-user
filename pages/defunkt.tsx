import styles from "../styles/defunkt.module.scss";
import { useState} from "react";
import {
    Formik,
    Form,
    Field,
} from 'formik';
import axios from "axios";
import * as Yup from "yup";
import Head from "next/head";

import UserInfo from "@/components/user-info";
import Loading from "@/components/loading";

import type UserType from "@/types/user.type";


interface MyFormValues {
    name: string;
}

const Defunkt = () => {
    const [data, setData] = useState<UserType>();
    const [error , setError ] = useState();
    const [loading , setLoading] = useState<boolean>(false);
    const initialValues: MyFormValues = { name: '' };


    const handleSubmit = async (values , {resetForm}) => {
       try {
           setLoading(true);
           resetForm();
           await axios(`https://api.github.com/users/${values.name}`)
               .then(data => setData(data.data))
               .catch((e) => {
                   setError(e.response)
               })
       }catch (e) {
           console.log(e.message)
       }finally {
           setLoading(false);
       }
    }

    return (
        <>
            <Head>
                <title>جستجوی کاربر</title>
                <meta name="description" content="Generated by create next app" />
                <meta name="viewport" content="width=device-width, initial-scale=1" />
                <link rel="icon" href="/favicon.ico" />
            </Head>
          <section className={styles.form_content}>
              <Formik
                  initialValues={initialValues}
                  validationSchema={Yup.object().shape({
                      name: Yup.string().required(),
                  })}
                  onSubmit={handleSubmit}
              >
                  {({errors}) => (
                      <Form className={styles.form_container}>
                          <h2 className={styles.topic}> نام کاربر را جستجو کنید </h2>
                          <Field id="name" name="name" placeholder="نام کاربر را وارد کنید" className={errors.name ? `${styles.error} ${styles.input}` : styles.input} />
                          <button type="submit" className={styles.btn}> جستجو </button>
                      </Form>
                  )}
              </Formik>
          </section>
            {loading ? <Loading /> : data ? <UserInfo data={data} /> : error?.status === 404 ? <p className={styles.search_user}> کاربر پیدا نشد </p> : <p className={styles.search_user}> کاربر مورد نظر را جستجو کنید </p>}
        </>
    );
};

export default Defunkt;